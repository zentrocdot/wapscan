#!/bin/bash

# ##############################################################################
# wapscan_oui
# Copyright © 2017-2024, Dr. Peter Netz
# Version 0.0.0.5
#
# Alternatives for scanning:
# (1) nmcli dev wifi list
# (2) iw dev wlan0 scan
#
# Exit Codes:
# -----------
# 1   : General error
# 2   : Misuse of builtins
# 8   : User has not sudo permissions
# 32  : Interface error
# 64  : Interface is not in managed mode
# 126 : Command cannot executed
# 127 : Command cannot found
# 128 : Invalid argument to exit
# 130 : Script terminated by Control-C
#
# References:
# -----------
# https://de.wikipedia.org/wiki/MAC-Adresse
# http://www.tldp.org/LDP/abs/html/exitcodes.html
# https://misc.flogisoft.com/bash/tip_colors_and_formatting
# ##############################################################################

# Make the script executable.
#if [[ ! -x "$0" ]]; then chmod +x "$0"; fi

# Set string.
STR="The program must be run as root!"

# Check if the script is running as root.
# iwlist requires root rights!
if ((EUID != 0)); then
    # Print a message in the terminal window.
    echo "Granting required root privileges for executing the program $(basename $0)"
    # Run the script as sudo.
    sudo "$0" "$@"
    # Exit the script.
    exit 8
fi

# Make sure that only root can run the script.
#if [ "$(id -u)" != "0" ]; then
#   # Write message into the terminal window.
#   echo "${STR}" 1>&2
#   # Exit script.
#   exit 8
#fi

# Initialise the limit variable.
LIMIT=""

# Initialise the interface variable.
IFACE=""

# Set the temporary filename.
#FILENAME="/tmp/wapscan.txt"

# Set oui path.
OUIPATH="/usr/share/wapscan/oui.txt"

# Set the array.
BSSIDLIST=()

# Get the command line arguments.
OPT=$1
VAR=$2

# Set the lower and upper bound.
UB=0
LB=-256

# Check the command line arguments.
if [ "${OPT}" == "-l" ] && [ "${VAR}" != "" ]; then
    if [ -z "${VAR//[0-9\-]/}" ]; then
        if [ "${VAR}" -le "${UB}" ] && [ "${VAR}" -gt "${LB}" ]; then
            # Set the limit variable.
            LIMIT=${VAR}
        fi
    fi
fi

# ==============================================================================
# Function header()
# ==============================================================================
function header() {
# Set color.
echo -ne "\e[44m"
# Show heredoc.
cat << "HEREDOC"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃   __      __ __ _  _ __   ___   ___   __ _  _ __     ┃
┃   \ \ /\ / // _` || '_ \ / __| / __| / _` || '_ \    ┃
┃    \ V  V /| (_| || |_) |\__ \| (__ | (_| || | | |   ┃
┃     \_/\_/  \__,_|| .__/ |___/ \___| \__,_||_| |_|   ┃
┃                   |_|                                ┃
┃                                                      ┃
┃                wapscan version 0.0.0.5               ┃
┃        Copyright © 2017-2024, Dr. Peter Netz         ┃
┃      iwlist based wireless access point scanner      ┃
┃                                                      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
HEREDOC
# Reset the color.
echo -ne "\e[49m"
# Write message into the terminal window.
echo -e "\n\e[101mExit program with CTRL+C\e[49m\n"
# Return the exit code.
return 0
}

# ==============================================================================
# Function trap_sigint()
# Function called by trap
# ==============================================================================
trap_sigint () {
    ch=" "
    str=$(printf '%*s' 67 | tr ' ' "$ch")
    printf "\r%s%s" "SIGINT caught" "${str}"
    printf "\r%s\n" "You pressed CTRL+C"
    tput cnorm
    exit 130
}

# ==============================================================================
# Function wrong_selection()
# ==============================================================================
wrong_selection () {
    # Write message into the terminal window.
    printf "\n%s\n" "${str3}"
    # Sleep a little bit.
    sleep 0.5
    # Reset screen.
    reset
    # print header.
    header
    # Get Interface.
    get_iface
    # Return exit code.
    return 0
}

# ==============================================================================
# Function get_iface()
# ==============================================================================
get_iface () {
    # Declare the local array.
    declare -A array
    # Define the local variables.
    local ifaces=""
    #local number=""
    local count=0
    # Set the local strings.
    local str0="Available WLAN Devices:"
    local str1="======================="
    local str2="Make your selection followed by ENTER:"
    local str3="Wrong selection!"
    # Get the name of the interfaces.
    ifaces=$(iw dev | awk '$1=="Interface"{print $2}')
    # Print a headline into the terminal window.
    printf "%s\n%s\n\n" "${str0}" "${str1}"
    # List interfaces in the terminal window.
    while IFS="" read -r iface
    do
        if [ "$(ifconfig | grep "${iface}")" != "" ]; then
            if [ ! -z $(iwconfig 2>/dev/null "${iface}" | grep -o "Mode:Managed") ]; then
                # Increment the counter.
                ((count=count+1))
                # Add a pair of data to the array.
                array+=(["${count}"]="${iface}")
                # Write the pair into the terminal window.
                printf "%s  =  %s\n" "${count}" "${iface}"
            fi
        fi
    done < <(echo "${ifaces}")
    # Check the counter.
    if [ "${count}" -eq "0" ]; then
        # Print message into the terminal window.
        printf "No WLAN devices found. Bye!\n"
        # Exit script.
        exit 0
    fi
    # Read the selection.
    printf "\n%s " "${str2}"
    read -r selection
    if [ -z "${selection//[0-9]/}" ]; then
        if [ "${selection}" -gt "${count}" ] || \
           [ "${selection}" -lt "1" ]; then
            wrong_selection
        fi
    else
        wrong_selection
    fi
    # Set the wlan interface.
    IFACE="${array[${selection}]}"
    # Return exit code.
    return 0
}

# ==============================================================================
# Function get_oui()
# ==============================================================================
get_oui () {
    local mac=$1
    local pattern=""
    pattern=$(echo ${mac:0:8})
    pattern=$(echo "${pattern^^}")
    pattern=$(echo $pattern | sed 's/:/-/g')
    #result=$(cat oui.txt | grep "$pattern" | awk -F '[(]hex[)]' '{print $2}' | sed -e 's/^[[:space:]]*//')
    result=$(cat "${OUIPATH}" | grep "$pattern" | awk -F '[(]hex[)]' '{print $2}' | sed -e 's/^[[:space:]]*//')
    if [[ $result != "" ]]; then
        result=${result:0:54}
        echo -n "$result"
    else
        echo -n "n/a"
    fi
}

# ==============================================================================
# Function get_bssidlist()
# ==============================================================================
get_bssidlist () {
    # Reset array.
    BSSIDLIST=()
    # Initialise the local variables.
    local ready=false
    local eod=false
    local mac=''
    local cell=''
    local chn=''
    local freq=''
    local qual=''
    local rssi=''
    local ssid=''
    local mode=''
    local enc=''
    local type=''
    local oui=''
    local nextcell=2
    local maclist=()
    # Read data from Linux command line by line.
    while IFS="" read -r line
    do
        if [[ "${line}" == *"Interface doesn't support scanning."* ]]; then
            # Write error message into the terminal window.
            printf "\n%s\n" "Interface ${IFACE} error. Bye!"
            # Exit script.
            exit 32
        elif [[ "${line}" == "" ]]; then
            # Set end of data to true.
            eod=true
        fi
        # Get cell number and MAC address.
        [[ "${line}" =~ Address: ]] && {
            cell=$(echo "${line}" | \
                   sed -E '{s/^[[:space:]]*Cell ([0-9]{2}).*$/\1/; s/^0//}')
            mac=${line##*ess: }
            maclist+=("${mac}")
        }
        # Get the frequency and the channel.
        [[ "${line}" =~ Frequency: ]] && {
            freq=${line##*ncy:}
            freq=${freq%% *}
            chn=${line##*nel }
            chn=${chn:0:$((${#chn}-1))};
        }
        # Get the quality and the RSSI.
        [[ "${line}" =~ Quality ]] && {
            qual=${line##*ity=}
            qual=${qual%% *}
            rssi=${line##*vel=}
            rssi=${rssi%% *}
        }
        # Get the access status.
        [[ "${line}" =~ Encryption ]] && {
            enc=${line##*key:}
        }
        # Get the ESSID.
        [[ "${line}" =~ ESSID: ]] && {
            ssid=${line##*SID:};
            ssid=${ssid//\"/}
            if  echo "${ssid}" | grep -q '\x00'; then
                len=$(echo "${ssid}" | grep -o '\x00' | wc -l)
                ssid="<length ${len}>"
            fi
            if  [[ "${ssid}" == "" ]]; then
                ssid="<length 0>"
            fi
            ssid=${ssid:0:32}
        }
        # Get the AP mode.
        [[ "${line}" =~ Mode: ]] && {
            mode=${line##*ode:}
        }
        # Get the last beacon.
        [[ "$line" =~ "Last beacon:" ]] && {
            lb=$(echo "${line##*con:}" | sed '{ s/ ago//; s/ms/ ms/ }')
        }
        # Get the encryption type.
        [[ "${line}" =~ "IE: WPA Version 1" ]] && {
            if [[ ${type} != "" ]]; then
                type="$type, WAP"
            else
                type="WAP"
            fi
        }
        [[ "${line}" =~ "IE: IEEE 802.11i/WPA2 Version 1" ]] && {
            if [[ ${type} != "" ]]; then
                type="$type, WAP2"
            else
                type="WAP2"
            fi
        }
        # Check on end of data.
        if [[ "${cell}" -eq "1" && "${eod}" == "true" ]]; then
            mac="${mac}"
            ready=true
        elif [[ "${cell}" -eq "${nextcell}" && "${eod}" != "true" ]]; then
            mac=${maclist[-2]}
            ready=true
            ((nextcell++))
        fi
        # Ad data to array.
        if [[ $ready == true ]]; then
            oui=$(get_oui $mac)
            if [[ $type == "" ]]; then
                type="n/a"
            fi
            if [[ "${LIMIT}" == "" ]]; then
                ap=$(printf "%s" \
                   "$mac;$chn;$freq;$rssi;$qual;$ssid;$mode;$enc;$type;$lb;$oui")
                BSSIDLIST+=("$ap")
            else
                if [[ "${rssi}" -gt "${LIMIT}" ]]; then
                    ap=$(printf "%s" \
                       "$mac;$chn;$freq;$rssi;$qual;$ssid;$mode;$enc;$type;$lb;$oui")
                    BSSIDLIST+=("$ap")
                fi
            fi
            # reset local variables.
            mac=''; chn=''; freq=''; rssi=''; qual=''
            ssid=''; mode=''; enc=''; type=''; oui=''
            ready=false
        fi
    done < <(iwlist "${IFACE}" scan 2>&1)
    # Return exit code.
    return 0
}

# ==============================================================================
# Function get_best_bssid()
# ==============================================================================
get_best_bssid () {
    # Set local variables.
    local rssi_ref="-256"
    local bssid_ref="n/a"
    local rssi_mac=""
    local bssid_mac=""
    # Loop over the array.
    for mac in "${BSSIDLIST[@]}"
    do
        rssi_mac=$(echo "${mac}" | awk -F ';' '{print $4}')
        if [[ "${rssi_mac}" -gt "${rssi_ref}" ]]; then
            rssi_ref="${rssi_mac}"
            bssid_mac=$(echo "${mac}" | awk -F ';' '{print $1}')
        fi
    done
    # Output the result.
    echo -n "${bssid_mac}"
    # Return exit code.
    return 0
}

# ==============================================================================
# Function print_data ()
# ==============================================================================
print_data () {
    # Set char.
    ch='='
    # Set strings.
    fs1=$(printf '%*s' 17 | tr ' ' "$ch")
    fs2=$(printf '%*s' 3 | tr ' ' "$ch")
    fs3=$(printf '%*s' 5 | tr ' ' "$ch")
    fs4=$(printf '%*s' 4 | tr ' ' "$ch")
    fs5=$(printf '%*s' 5 | tr ' ' "$ch")
    fs6=$(printf '%*s' 32 | tr ' ' "$ch")
    fs7=$(printf '%*s' 6 | tr ' ' "$ch")
    fs8=$(printf '%*s' 3 | tr ' ' "$ch")
    fs9=$(printf '%*s' 10 | tr ' ' "$ch")
    fs10=$(printf '%*s' 3 | tr ' ' "$ch")
    # Clear screen.
    clear
    # Print data to screen.
    printf "%-17s  %-3s  %-5s  %-4s  %-5s  %-32s  %-6s  %-3s  %-10s  %s\n" \
           "BSSID" "CH" "FREQ" "RSSI" "QUAL" \
           "ESSID" "MODE" "ENC" "ENCRYPTION" "OUI"
    printf "%-17s  %-3s  %-5s  %-4s  %-5s  %-32s  %-6s  %-3s  %-10s  %s\n" \
           "${fs1}" "${fs2}" "${fs3}" "${fs4}" "${fs5}" \
           "${fs6}" "${fs7}" "${fs8}" "${fs9}" "${fs10}"
    # Loop over the array.
    VAR=$(for ele in "${BSSIDLIST[@]}"
    do
        bssid_ele=$(echo "${ele}" | awk -F ';' '{print $1}')
        if [[ "${bssid_ele}" == "${bssid_ref}" ]]; then
            temp=$(echo "${ele}" | \
                awk -F ';' '{printf "%-17s  ",$1; printf "%-3s  ",$2;
                             printf "%5s  ",$3; printf "%4s  ",$4;
                             printf "%5s  ", $5; printf "%-32s  ",$6;
                             printf "%-6s  ",$7; printf "%-3s  ",$8;
                             printf "%-10s  ",$9; printf "%-s\n", $11}')
            echo -e "$temp"
        fi
    done)
    printf "%b%s%b" "\e[42m" "${VAR}" "\e[49m"
    # Loop over the array.
    VAR=$(for ele in "${BSSIDLIST[@]}"
    do
        bssid_ele=$(echo "${ele}" | awk -F ';' '{print $1}')
        if [[ "${bssid_ele}" != "${bssid_ref}" ]]; then
            echo "${ele}" | \
                awk -F ';' '{printf "%-17s  ",$1; printf "%-3s  ",$2;
                             printf "%5s  ",$3; printf "%4s  ",$4;
                             printf "%5s  ",$5; printf "%-32s  ",$6;
                             printf "%-6s  ",$7; printf "%-3s  ",$8;
                             printf "%-10s  ",$9; printf "%-s\n", $11}'
                printf "%b" "\n\n"
        fi
    done | sort -u -k4 -k5)
    # Print the sorted data to the screen.
    printf "%s%b" "${VAR}" "\n"
    # Write a message into the terminal window.
    echo -ne "\n\e[100mExit the program with CTRL+C\e[49m"
    # Return exit code.
    return 0
}

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Function main_loop
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
main_loop () {
    # Run an infinite loop.
    while true
    do
        # Try to get a list with BSSIDs.
        get_bssidlist
        # Check if data are available.
        if (( ${#BSSIDLIST[@]} != 0 )); then
            # Get the best BSSID from list.
            bssid_ref=$(get_best_bssid)
            # Print the collected data into the terminal window.
            print_data
            # Sleep a little bit.
            sleep 0.5
        else
            # Clear the terminal window.
            clear
            # Write a message into the terminal window.
            printf "%s\n" "Could not get data from the device ..."
            # Sleep a little bit.
            sleep 0.5
        fi
    done
    # Return the exit code 0.
    return 0
}

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Main Script Section
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# Remove temporary file.
#rm -f "${FILENAME}"

# Trap SIGINT
trap 'trap_sigint' SIGINT

# Reset screen.
reset

# Write header.
header

# Call function.
get_iface

# Write message into the terminal window.
echo -e "\nPlease wait. Data will be collected."

# Hide the cursor.
tput civis

# Run the main loop.
main_loop

# Show the cursor.
tput cnorm

# Exit the script.
exit 0
