#!/bin/bash

# ##############################################################################
# wap_scan
# Copyright © 2017, Dr. Peter Netz
#
# Alternatives for scanning:
# (1) nmcli dev wifi list
# (2) iw dev wlan0 scan
#
# Exit Codes:
# -----------
# 1   : General error
# 2   : Misuse of builtins
# 8   : User has not sudo permissions
# 16  : Wrong interface selection
# 32  : Interface error
# 64  : Interface is not in managed mode
# 126 : Command cannot executed
# 127 : Command cannot found
# 128 : Invalid argument to exit
# 130 : Script terminated by Control-C
#
# References:
# -----------
# https://de.wikipedia.org/wiki/MAC-Adresse
# http://www.tldp.org/LDP/abs/html/exitcodes.html
# ##############################################################################

# Make the script executable.
if [[ ! -x "$0" ]]; then chmod +x "$0"; fi

# Make sure that only root can run the script.
if [ "$(id -u)" != "0" ]; then
   # Write message into the terminal window.
   echo "This script must be run as root" 1>&2
   # Exit script.
   exit 8
fi

# Initialise the limit variable.
LIMIT=""

# Initialise the interface variable.
IFACE=""

# Set the filename.
FILENAME="wap_scan.txt"

# Set the array.
BSSIDLIST=()

# Get the command line arguments.
OPT=$1
VAR=$2

# Set the lower and upper bound.
UB=0
LB=-256

# Check the command line arguments.
if [ "${OPT}" == "-l" ] && [ "${VAR}" != "" ]; then
    if [ -z "${VAR//[0-9\-]/}" ]; then
        if [ "${VAR}" -le "${UB}" ] && [ "${VAR}" -gt "${LB}" ]; then
            # Set the limit variable.
            LIMIT=${VAR}
        fi
    fi
fi

# ==============================================================================
# Function header()
# ==============================================================================
function header() {
# Define a heredoc.
cat << "HEREDOC"
__      ____ _ _ __     ___  ___ __ _ _ __
\ \ /\ / / _` | '_ \   / __|/ __/ _` | '_ \
 \ V  V / (_| | |_) |  \__ \ (_| (_| | | | |
  \_/\_/ \__,_| .__/___|___/\___\__,_|_| |_|
   wpa_scan   |_| |_____|   version 0.0.1

iwlist based wireless access point scanner
Copyright © October 2017 by Dr. Peter Netz

HEREDOC
# Return the exit code.
return 0
}

# ==============================================================================
# Function trap_sigint()
# Function called by trap
# ==============================================================================
function trap_sigint() {
    ch=" "
    str=$(printf '%*s' 67 | tr ' ' "$ch")
    printf "\r%s%s" "SIGINT caught" "${str}"
    printf "\r%s\n" "You pressed CTRL+C"
    exit 130
}

# ==============================================================================
# Function get_iface()
# ==============================================================================
function get_iface() {
    # Declare the local array.
    declare -A array
    # Define the local variables.
    local ifaces=""
    local number=""
    local count=0
    # Set the local strings.
    local str0="Found WLAN Devices:"
    local str1="==================="
    local str2="Make your selection followed by ENTER:"
    local str3="Wrong selection. Bye!"
    # Get the name of the interfaces.
    ifaces=$(iw dev | awk '$1=="Interface"{print $2}')
    # Get the number of the interfaces.
    number=$(echo "${ifaces}" | wc -l)
    # Check the number of interfaces.
    if [[ "${number}" -ne "1" ]]; then
        # Print a headline into the terminal window.
        printf "%s\n%s\n\n" "${str0}" "${str1}"
        # List interfaces in the terminal window.
        while IFS="" read -r iface
        do
            # Increment the counter.
            ((count=count+1))
            # Add a pair of data to the array.
            array+=(["${count}"]="${iface}")
            # Write the pair into the terminal window.
            printf "%s  =  %s\n" "${count}" "${iface}"
        done < <(echo "${ifaces}")
        # Read the selection.
        printf "\n%s " "${str2}"
        read -r selection
        # Check the selection.
        if [ -z "${selection//[0-9]/}" ]; then
            if [ "${selection}" -gt "${count}" ] || \
               [ "${selection}" -lt "1" ]; then
                printf "\n%s\n" "${str3}"
                # Exit script.
                exit 16
            fi
        else
            printf "\n%s\n" "${str3}"
            # Exit script.
            exit 16
        fi
        # Set the wlan interface.
        IFACE="${array[${selection}]}"
    else
        # Set the wlan interface.
        IFACE="${ifaces}"
    fi
    # Return exit code.
    return 0
}

# ==============================================================================
# Function get_bssidlist()
# ==============================================================================
function get_bssidlist() {
    # Reset array.
    BSSIDLIST=()
    # Initialise the local variables.
    local ready=false
    local eod=false
    local mac=''
    local cell=''
    local chn=''
    local freq=''
    local qual=''
    local rssi=''
    local ssid=''
    local mode=''
    local enc=''
    local type='--'
    local nextcell=2
    local maclist=()
    # Read data from Linux command line by line.
    while IFS="" read -r line
    do
        if [[ "$line" == *"Interface doesn't support scanning."* ]]; then
            # Write message into the terminal window.
            printf "\n%s\n" "Interface ${IFACE} error. Bye!"
            # Exit script.
            exit 32
        elif [[ "${line}" == "" ]]; then
            # Set end of data to true.
            eod=true
        fi
        # Get cell number and MAC address.
        [[ "$line" =~ Address: ]] && {
            cell=$(echo "${line}" | \
                   sed -E '{s/^[[:space:]]*Cell ([0-9]{2}).*$/\1/; s/^0//}')
            mac=${line##*ess: }
            maclist+=("${mac}")
        }
        # Get the frequency and the channel.
        [[ "$line" =~ Frequency: ]] && {
            freq=${line##*ncy:}
            freq=${freq%% *}
            chn=${line##*nel }
            chn=${chn:0:$((${#chn}-1))};
        }
        # Get the quality and the RSSI.
        [[ "$line" =~ Quality ]] && {
            qual=${line##*ity=}
            qual=${qual%% *}
            rssi=${line##*vel=}
            rssi=${rssi%% *}
        }
        # Get the access status.
        [[ "$line" =~ Encryption ]] && {
            enc=${line##*key:}
        }
        # Get the ESSID.
        [[ "$line" =~ ESSID: ]] && {
            ssid=${line##*SID:};
            ssid=${ssid//\"/}
            if  echo "${ssid}" | grep -q '\x00'; then
                len=$(echo "${ssid}" | grep -o '\x00' | wc -l)
                ssid="<length ${len}>"
            fi
            if  [[ "${ssid}" == "" ]]; then
                ssid="<length 0>"
            fi
            ssid=${ssid:0:32}
        }
        # Get the AP mode.
        [[ "$line" =~ Mode: ]] && {
            mode=${line##*ode:}
        }
        # Get the last beacon.
        [[ "$line" =~ "Last beacon:" ]] && {
            lb=$(echo "${line##*con:}" | sed '{ s/ ago//; s/ms/ ms/ }')
        }
        # Get the encryption type.
        [[ "$line" =~ "IE: WPA Version 1" ]] && {
            type="WAP"
        }
        [[ "$line" =~ "IE: IEEE 802.11i/WPA2 Version 1" ]] && {
            if [[ "${type}" != "--" ]]; then
                type="$type, WAP2"
            else
                type="WAP2"
            fi
        }
        # Check on end of data.
        if [[ "$cell" -eq "1" && "$eod" == "true" ]]; then
            mac=$mac
            ready=true
        elif [[ "$cell" -eq "$nextcell" && "$eod" != "true" ]]; then
            mac=${maclist[-2]}
            ready=true
            ((nextcell++))
        fi
        # Ad data to array.
        if [[ $ready == true ]]; then
            if [[ "${LIMIT}" == "" ]]; then
                ap=$(printf "%s" \
                   "$mac;$chn;$freq;$rssi;$qual;$ssid;$mode;$enc;$type;$lb")
                BSSIDLIST+=("$ap")
            else
                if [[ "${rssi}" -gt "${LIMIT}" ]]; then
                    ap=$(printf "%s" \
                       "$mac;$chn;$freq;$rssi;$qual;$ssid;$mode;$enc;$type;$lb")
                    BSSIDLIST+=("$ap")
                fi
            fi
            # reset local variables.
            mac=''; chn=''; freq=''; rssi=''
            qual=''; ssid=''; mode=''; enc=''
            type='--'
            ready=false
        fi
    done < <(iwlist "${IFACE}" scan 2>&1)
    # Return exit code.
    return 0
}

# ==============================================================================
# Function get_best_bssid()
# ==============================================================================
function get_best_bssid() {
    # Set local variables.
    local rssi_ref="-256"
    local bssid_ref="n/a"
    local rssi_mac=""
    local bssid_mac=""
    # Loop over the array.
    for mac in "${BSSIDLIST[@]}"
    do
        rssi_mac=$(echo "${mac}" | awk -F ';' '{print $4}')
        if [[ "${rssi_mac}" -gt "${rssi_ref}" ]]; then
            rssi_ref="${rssi_mac}"
            bssid_mac=$(echo "${mac}" | awk -F ';' '{print $1}')
        fi
    done
    # Output the result.
    echo -n "${bssid_mac}"
    # Return exit code.
    return 0
}

# ==============================================================================
# Function print_result()
# ==============================================================================
function print_result() {
    # Set char.
    ch='='
    # Set strings.
    fs1=$(printf '%*s' 17 | tr ' ' "$ch")
    fs2=$(printf '%*s' 2 | tr ' ' "$ch")
    fs3=$(printf '%*s' 5 | tr ' ' "$ch")
    fs4=$(printf '%*s' 4 | tr ' ' "$ch")
    fs5=$(printf '%*s' 5 | tr ' ' "$ch")
    fs6=$(printf '%*s' 32 | tr ' ' "$ch")
    fs7=$(printf '%*s' 6 | tr ' ' "$ch")
    fs8=$(printf '%*s' 3 | tr ' ' "$ch")
    fs9=$(printf '%*s' 9 | tr ' ' "$ch")
    fs10=$(printf '%*s' 9 | tr ' ' "$ch")
    # Clear screen.
    clear
    # Print data to screen.
    printf "%-17s\t%-2s\t%-5s\t%-4s\t%-5s\t%-32s\t%-6s\t%-3s\t%-9s\t%-9s\n" \
           "BSSID" "CH" "FREQ" "RSSI" "QUAL" \
           "ESSID" "MODE" "ENC" "TYPE" "LAST SEEN"
    printf "%-17s\t%-2s\t%-5s\t%-4s\t%-5s\t%-32s\t%-6s\t%-3s\t%-9s\t%-9s\n" \
           "${fs1}" "${fs2}" "${fs3}" "${fs4}" "${fs5}" \
           "${fs6}" "${fs7}" "${fs8}" "${fs9}" "${fs10}"
    # Print file to screen.
    cat "${FILENAME}"
    # Return exit code.
    return 0
}

# ==============================================================================
# Function main_loop()
# ==============================================================================
function main_loop() {
    while true
    do
        # Get BSSID list.
        get_bssidlist
        # Get best BSSID.
        bssid_ref=$(get_best_bssid)
        # Loop over the array.
        for ele in "${BSSIDLIST[@]}";
        do
            bssid_ele=$(echo "${ele}" | awk -F ';' '{print $1}')
            if [[ "${bssid_ele}" == "${bssid_ref}" ]]; then
                temp=$(echo "${ele}" | \
                    awk -F ';' '{printf "%-17s\t",$1; printf "%-2s\t",$2;
                                 printf "%5s\t",$3; printf "%4s\t",$4;
                                 printf "%5s\t", $5; printf "%-32s\t",$6;
                                 printf "%-6s\t",$7; printf "%-3s\t",$8;
                                 printf "%-9s\t",$9; printf "%-9s\n",$10 }')
                temp="\e[42m$temp\e[49m"
                echo -e "$temp"
            fi
        done > "$FILENAME"
        # Loop over the array.
        for ele in "${BSSIDLIST[@]}";
        do
            bssid_ele=$(echo "${ele}" | awk -F ';' '{print $1}')
            if [[ "${bssid_ele}" != "${bssid_ref}" ]]; then
                echo "${ele}" | \
                    awk -F ';' '{printf "%-17s\t",$1; printf "%-2s\t",$2;
                                 printf "%5s\t",$3; printf "%4s\t",$4;
                                 printf "%5s\t",$5; printf "%-32s\t",$6;
                                 printf "%-6s\t",$7; printf "%-3s\t",$8;
                                 printf "%-9s\t",$9; printf "%-9s\n",$10 }'
            fi
        done | sort -u -k4 -k5 >> "$FILENAME"
        # Print result into the terminal window.
        if [ -s "$FILENAME" ]
        then
            print_result
        fi
    done
    # Return exit code.
    return 0
}

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Main Script Section
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# Trap SIGINT
trap 'trap_sigint' SIGINT

# Reset screen.
reset

# Write header.
header

# Remove temporary file.
rm -f "${FILENAME}"

# Call function.
get_iface

# Check mode of interface.
if [ -z $(iwconfig 2>/dev/null "${IFACE}" | grep -o "Mode:Managed") ]; then
    # Write message into the terminal window.
    printf "\n%s\n" "Interface is not in managed mode. Bye!"
    # Exit script.
    exit 64
fi

# Write message into the terminal window.
echo -e "\nBe patient. Data will be collected."

# Run main loop.
main_loop

# Exit script.
exit 0
